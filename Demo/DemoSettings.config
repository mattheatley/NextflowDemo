/* PARAMETER DEFAULTS */

params {

    input  = '/path'
    output = '/path'
    value1 = 'A'
    value2 = 1
    bool1  = true
    bool2  = false

    // Max resource options
    // Defaults only, expecting to be overwritten
    max_memory                 = '2.GB'
    max_cpus                   = 4
    max_time                   = '2.h'

}



/* PROFILE SCOPES */

profiles {

    /* LOCAL SETTINGS (DOCKER) */

    local {

        /* WORKFLOW */

        /* launchDir/workDir/ */
        workDir = 'local'

        /* DOCKER */
        docker.enabled         = true
        docker.userEmulation   = true 

    }

    /* HPCC SETTINGS (UoN) */

    augusta {

        /* WORKFLOW */

        /* launchDir/<workDir>/ */
        workDir = 'augusta'

        /* PROCESS */

        process.beforeScript = '''
        echo "beforeScript" > process.log
        echo "initial umask: $(umask)" >> process.log
        umask 0022
        echo "modified umask: $(umask)\n" >> process.log
        '''

        process.afterScript = '''
        echo "afterScript" >> process.log
        echo "final umask: $(umask)\n" >> process.log
        '''
        
        /* N.B. [before|after]Script sections executed (i) prior to 'module' & (ii) outside container */



        /* SLURM */

        process.executor       = 'slurm'
        process.queue          = 'defq'
        //process.clusterOptions = ''


        /* SINGULARITY */

        process.module              = 'singularity/3.4.2'
        singularity.enabled         = true
        singularity.autoMounts      = true

        /* launchDir/<cachDir>/image.[sif|img] */
        singularity.cacheDir        = 'singularity'

        /* global options; singularity [OPTIONS] exec... */
        singularity.engineOptions = '--verbose --nocolor'

        /* command options; singularity exec [OPTIONS]... */
        //singularity.runOptions    = ''

    }
}

/* PROCESS SCOPES */

/* nf-core process scopes stored in seperate "base.config" */
//includeConfig './path/to/base.config'

/* container formats

dockerhub:
    docker_user/container_name

other repositories (URL required):
    https://quay.io/category/tool:version
    https://depot.galaxyproject.org/category/tool:version

*/


/* NF-CORE TEMPLATE START */
// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
/* NF-CORE TEMPLATE END */


process {

    /* general process settings */

    //container = 'URL/image_name'
    cpus       = { check_max( 1    * task.attempt, 'cpus'   ) }
    memory     = { check_max( 1.GB * task.attempt, 'memory' ) }
    time       = { check_max( 1.h  * task.attempt, 'time'   ) }
    maxRetries = 3

    /* process specific settings */

    //withName: PROCESS1 {
    //container  = 'URL/image_name'
    //cpus       = { check_max( N    * task.attempt, 'cpus'   ) }
    //memory     = { check_max( N.GB * task.attempt, 'memory' ) }
    //time       = { check_max( N.h  * task.attempt, 'time'   ) }
    //maxRetries = 3
    //queue      = 'defq'
    //}

}


